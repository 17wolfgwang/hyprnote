// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetHealthData, PostApiNativeChatCompletionsData, GetApiNativeUserIntegrationsData, GetApiNativeUserIntegrationsResponse, GetApiNativeSubscriptionData, GetApiNativeSubscriptionResponse, PostApiWebConnectData, PostApiWebConnectResponse, GetApiWebSessionByIdData, GetApiWebSessionByIdResponse, PostApiWebIntegrationConnectionData, PostApiWebIntegrationConnectionResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

export const postApiNativeChatCompletions = <ThrowOnError extends boolean = false>(options: Options<PostApiNativeChatCompletionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/native/chat/completions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiNativeUserIntegrations = <ThrowOnError extends boolean = false>(options?: Options<GetApiNativeUserIntegrationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiNativeUserIntegrationsResponse, unknown, ThrowOnError>({
        url: '/api/native/user/integrations',
        ...options
    });
};

export const getApiNativeSubscription = <ThrowOnError extends boolean = false>(options?: Options<GetApiNativeSubscriptionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiNativeSubscriptionResponse, unknown, ThrowOnError>({
        url: '/api/native/subscription',
        ...options
    });
};

export const postApiWebConnect = <ThrowOnError extends boolean = false>(options: Options<PostApiWebConnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiWebConnectResponse, unknown, ThrowOnError>({
        url: '/api/web/connect',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiWebSessionById = <ThrowOnError extends boolean = false>(options?: Options<GetApiWebSessionByIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiWebSessionByIdResponse, unknown, ThrowOnError>({
        url: '/api/web/session/{id}',
        ...options
    });
};

export const postApiWebIntegrationConnection = <ThrowOnError extends boolean = false>(options: Options<PostApiWebIntegrationConnectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiWebIntegrationConnectionResponse, unknown, ThrowOnError>({
        url: '/api/web/integration/connection',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};