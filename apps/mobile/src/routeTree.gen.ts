/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NoteImport } from './routes/note'
import { Route as IndexImport } from './routes/index'
import { Route as NoteIdImport } from './routes/note.$id'

// Create/Update Routes

const NoteRoute = NoteImport.update({
  id: '/note',
  path: '/note',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NoteIdRoute = NoteIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => NoteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/note': {
      id: '/note'
      path: '/note'
      fullPath: '/note'
      preLoaderRoute: typeof NoteImport
      parentRoute: typeof rootRoute
    }
    '/note/$id': {
      id: '/note/$id'
      path: '/$id'
      fullPath: '/note/$id'
      preLoaderRoute: typeof NoteIdImport
      parentRoute: typeof NoteImport
    }
  }
}

// Create and export the route tree

interface NoteRouteChildren {
  NoteIdRoute: typeof NoteIdRoute
}

const NoteRouteChildren: NoteRouteChildren = {
  NoteIdRoute: NoteIdRoute,
}

const NoteRouteWithChildren = NoteRoute._addFileChildren(NoteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/note': typeof NoteRouteWithChildren
  '/note/$id': typeof NoteIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/note': typeof NoteRouteWithChildren
  '/note/$id': typeof NoteIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/note': typeof NoteRouteWithChildren
  '/note/$id': typeof NoteIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/note' | '/note/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/note' | '/note/$id'
  id: '__root__' | '/' | '/note' | '/note/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NoteRoute: typeof NoteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NoteRoute: NoteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/note"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/note": {
      "filePath": "note.tsx",
      "children": [
        "/note/$id"
      ]
    },
    "/note/$id": {
      "filePath": "note.$id.tsx",
      "parent": "/note"
    }
  }
}
ROUTE_MANIFEST_END */
